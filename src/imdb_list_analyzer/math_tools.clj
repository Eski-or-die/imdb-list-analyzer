;; Part of the IMDb List Analyzer program.;; 'Math Tools' file provides basic mathematic functions for list analytics:;;  sum, mean, dot-product, variance, stdev, correlation.;;;;  These functions strive for numerical stability at the expense of speed.;;  Contracts are used extensively to guard against improper use of;;  the functions.;;;; Esa Junttila 2013-07-02;;(ns imdb-list-analyzer.math-tools);(set! *warn-on-reflection* true)  ; enable only for testing(defn sum  "Compute the sum of a collection of numbers.   Return zero if the collection is empty."  [coll]  {:pre [(coll? coll) (every? number? coll)]   :post (number? %)}  (if (= (count coll) 0)    0    (reduce + coll)))(defn mean  "Compute the mean of a collection of numbers.   Return NaN if the collection is empty."  [coll]  {:pre [(coll? coll) (every? number? coll)]   :post (number? %)}  (let [n (count coll)]    (if (= n 0)      Double/NaN      (/ (sum coll) n))))(defn dot-product  "Compute the dot product between two equal-size collections of numbers.   Return zero if the collections are empty."  [coll1 coll2]  {:pre [(coll? coll1)         (coll? coll2)         (= (count coll1) (count coll2))         (every? number? coll1)         (every? number? coll2)]   :post (number? %)}  (reduce + (map * coll1 coll2)))(defn variance  "Compute the sample variance from a collection of at least two numbers."  [coll]  {:pre [(coll? coll)         (>= (count coll) 2)         (every? number? coll)]   :post [(or (>= % 0.0) (Double/isNaN %))]}  (let [mus (repeat (count coll) (mean coll))        diff (map - coll mus)]    (/ (dot-product diff diff) (dec (count coll)))))(defn stdev  "Compute the sample standard deviation from a collection of at least numbers."  [coll]  {:pre [(coll? coll)         (>= (count coll) 2)         (every? number? coll)]   :post [(or (>= % 0.0) (Double/isNaN %))]}  (Math/sqrt (variance coll)))(defn- st-score  "Compute the standard scores for a sample of numbers.   That is, deviations from mean in stdev units (sigma)."  [coll]  (let [n (count coll)        mu (mean coll)        sigma (stdev coll)]    (if (zero? sigma)      (repeat n Double/NaN)      (map #(/ (- % mu) sigma) coll))))(defn correlation  "Compute the Pearson product-moment correlation coefficient between two   collections of numbers."  [coll1 coll2]  {:pre [(= (count coll1) (count coll2)) (>= (count coll1) 2)]   :post [(or (<= -1.0 % +1.0) (Double/isNaN %))]}  (let [n (count coll1)        corr (/ (dot-product (st-score coll1) (st-score coll2)) (dec n))]    (cond  ; handle small numerical instabilities like '1.0000000000000002'      (> corr +1.0) +1.0      (< corr -1.0) -1.0      :else corr))); deprecated, because it is not numerically stable;(defn- mean-diff;  "Difference of values from the sample mean.";  [coll];  (let [mu (mean coll)];    (map #(- % mu) coll)));; deprecated;(defn correlation;  "Compute the Pearson product-moment correlation coefficient between two;   collections of numbers.";  [coll1 coll2];  {:pre [(= (count coll1) (count coll2)) (>= (count coll1) 2)];   :post [(or (and (<= % 1.0) (>= % -1.0)) (Double/isNaN %))]};  (let [diff1 (mean-diff coll1);        diff2 (mean-diff coll2);        coeff1 (Math/sqrt (dot-product diff1 diff1));        coeff2 (Math/sqrt (dot-product diff2 diff2));    corr (/;          (dot-product diff1 diff2);          (* coeff1 coeff2))];    (cond  ; account for a small numerical error;      (> corr +1.0) +1.0;      (< corr -1.0) -1.0;      :else corr)))