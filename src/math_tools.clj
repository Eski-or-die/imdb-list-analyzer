;; Part of the IMDb List Analyzer program.;; 'Math Tools' file provides basic mathematic functions for list analytics:;;  sum, mean, dot-product, variance, stdev, correlation;;;; Tested on Clojure 1.5.1;;;; Esa Junttila 2013-06-23;;(ns math-tools)(defn sum  "Compute the sum of numbers. Zero is returned if 'nums' is empty."  [nums]  {:post (number? %)}  (if (= (count nums) 0)    0    (reduce + nums)))(defn mean  "Compute the mean of numbers. NaN is returned if 'nums' is empty."  [nums]  {:post (number? %)}  (let [n (count nums)]    (if (= n 0)      Double/NaN      (/ (sum nums) n))))(defn dot-product  "Compute the dot product between two sequences.   Both 'values1' and 'values2' must have equal sizes."  [nums1 nums2]  {:pre [(= (count nums1) (count nums2))]   :post (number? %)}  (reduce + (map * nums1 nums2)))(defn variance  "Compute the (sample) variance of numbers."  [nums]  {:pre [(>= (count nums) 2)]   :post [(or (>= % 0.0) (Double/isNaN %))]}  (let [mus (repeat (count nums) (mean nums))        diff (map - nums mus)]    (/ (dot-product diff diff) (dec (count nums)))))(defn stdev  "Compute the (sample) standard deviation of numbers."  [nums]  {:pre [(>= (count nums) 2)]   :post [(or (>= % 0.0) (Double/isNaN %))]}  (Math/sqrt (variance nums)))(defn- st-score  "Compute the standard scores for a sample of numbers.   That is, deviations from mean in stdev units (sigma)."  [nums]  (let [n (count nums)        mu (mean nums)        sigma (stdev nums)]    (map #(/ (- % mu) sigma) nums)))(defn correlation  "Compute the Pearson product-moment correlation coefficient between two   sequences of numbers."  [nums1, nums2]  {:pre [(= (count nums1) (count nums2)) (>= (count nums1) 2)]   :post [(or (and (<= % 1.0) (>= % -1.0)) (Double/isNaN %))]}  (let [n (count nums1)         corr (/ (dot-product (st-score nums1) (st-score nums2)) (dec n))]    (cond  ; account for a small numerical error      (> corr +1.0) +1.0      (< corr -1.0) -1.0      :else corr)));; Main testing script:;; 'sum', 'mean', 'dot-product', 'variance', 'stdev', 'correlation';(set! *warn-on-reflection* true)  ; enable only for testing(do  ;; Test 'sum'  (cond (not= (sum []) 0) (println (str "sum" 1)))  (cond (not= (sum [1]) 1) (println (str "sum" 2)))  (cond (not= (sum [2 3 4]) 9) (println (str "sum" 3)))  (cond (not (Double/isNaN (sum [2 Double/NaN 4]))) (println (str "sum" 4)))  (cond (not= (sum [-2 3 -4]) -3) (println (str "sum" 5)))  ; Computing fractions: 4/3 - 5/3 + 2/3 = (4 - 5 + 2)/3 = 1 / 3  (cond (not= (sum [(/ 4 3) (- (/ 5 3)) (/ 2 3)]) (/ 3)) (println (str "sum" 6)))  ;; Test 'mean'  (cond (not (Double/isNaN (mean []))) (println (str "mean" 1)))  (cond (not (Double/isNaN (mean [1 Double/NaN 3]))) (println (str "mean" 2)))  (cond (not= (mean [0]) 0) (println (str "mean" 3)))  (cond (not= (mean [1 2 3 4 5]) 3) (println (str "mean" 4)))  (cond (not= (mean [-5 6 7 -8]) 0) (println (str "mean" 5)))  (cond (not= (mean [100 101 110 119]) (/ 430 4)) (println (str "mean" 6)))  ;; Test 'dot-product'  ;(println (dot-product [2 3 -4] [-5 6 7 0]))  ;throws AssertionError  (cond (not= (dot-product [] [])) (println (str "dot-product" 1)))  (cond (not= (dot-product [0] [2]) 0) (println (str "dot-product" 2)))  (cond (not (Double/isNaN (dot-product [1 Double/NaN 3] [5 6 7]) )) (println (str "dot-product" 3)))  (cond (not= (dot-product [2 3 -4] [-5 6 7]) -20) (println (str "dot-product" 4)))  ;; Test 'variance' (reference values computed in R)  ;(println (variance [7]))  ;throws AssertionError  ;(println (variance []))   ;throws AssertionError  (cond (not= (variance [1 2]) (/ 2)) (println (str "variance" 1)))  (cond (not= (double (variance [1 -10 13 -15 16])) 186.5) (println (str "variance" 2)))  (cond (not (Double/isNaN (variance [1 Double/NaN 3]))) (println (str "variance" 3)))  (cond (not= (variance [7 7 7 7 7 7]) 0) (println (str "variance" 4)))  ;; Test 'stdev' (reference values computed in R)  ;(println (stdev [1]))  ;throws AssertionError  (cond (not= (stdev [1 2]) (Math/sqrt (/ 2))) (println (str "stdev" 1)))  (cond (> (Math/abs (- (stdev [1 2 -7 19 50]) 22.74863)) 0.00001) (println (str "stdev" 2)))  (cond (not (Double/isNaN (stdev [-1 Double/NaN -3]))) (println (str "stdev" 3)))  (cond (not= (variance [(/ 9) (/ 9) (/ 9) (/ 9) (/ 9)]) 0) (println (str "stdev" 4)))  ;; Test 'correlation' (reference values computed in R)  ;(println (correlation [] []))  ;throws AssertionError  ;(println (correlation [1] []))  ;throws AssertionError  ;(println (correlation [1] [4]))  ;throws AssertionError  ;(println (correlation [] [6]))  ;throws AssertionError  ;(println (correlation [1 4] [6]))  ;throws AssertionError  ;(println (correlation [4] [6 6]))  ;throws AssertionError  ;(println (correlation [1 2 3] [9 8 7 6]))  ;throws AssertionError  (cond (not= (correlation [1 2] [2 9]) 1.0) (println (str "correlation" 1)))  (cond (not= (correlation [-1 0 1 2 5] [1 2 3 4 7]) 1.0) (println (str "correlation" 2)))  (cond (> (Math/abs (- (correlation [1 2 3] [2 3 5]) 0.9819805)) 0.0000001) (println (str "correlation" 3)))  (cond (> (Math/abs (- (correlation [1 -2 4 6 3] [3 3 5 2 -4]) -0.1102462)) 0.0000001) (println (str "correlation" 4))))